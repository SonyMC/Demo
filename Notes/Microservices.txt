(1) use version 3 to demo non-cloud demo by enabling rabbit specs in application.properties 
(2) use version 3 to demo-compose by commenting out rabbit specs in application.properties 
(3) For docker image creation , docker file is present in sample-service-limits ( Eclipse folder:limits-service-v2-sample)
(4) use version kubenetes to demo k8s


- Order of starting:
	(1) For MS demo:
		- In application.prpoerties of   currency-exchange,currency-conversion, uncomment:
		spring.zipkin.baseUrl=http://localhost:9411/
		spring.zipkin.sender.type=rabbit

		- in api-gateway, uncooment:
		spring.zipkin.sender.type=rabbit

	(2) For docker-compose demo- comment out the above 
	
Order;

	(1) Start Rabbit MQ server( this should automatically start the service)
	(2) Zipkin:D:\OneDrive\Software\Zipkin
		open cmd prompt here and type two commands : 
		cmds:
			: set RABBIT_URI=amqp://localhost
        		: java -jar zipkin-server-2.23.2-exec.jar
	(3)Eureka
	(4) Spring Cloud Config server
	(5)Limit service
	(6)Currency Exchange service :
		- creating instances-> configuration-> duplicate-> Argumnets-> VM arguments:-Dserver.port=new port number
	(7) Currency Conversion 
	(8) API gateway
	 


Micorservices_v2_ulr:
-------------------------
(1) Spring Cloud Config Server: http://localhost:8888

(2) Accessing properties file: http://localhost:8888/limits-service-v2/default

(3) limits url: http://localhost:8080/limits


(4) Currency exchange service: 
http://localhost:8000/currency-exchange/from/USD/to/INR

Response Structure
{
   "id":10001,
   "from":"USD",
   "to":"INR",
   "conversionMultiple":65.00,
   "environment":"8000 instance-id"
}


- Creating a new instance in Eclipe : Run -> Run configuration-> seelct runnign instance -> right click-> duplicate-> change name-> Arguments tab->VM arguments=-Dserver.port=8001

- url to h2 console: localhost:8000/h2-console
	- Once in console overwrite the JDBC url with what we have provided in the application-properties file = jdbc:h2:mem:testdb

(5) Currency Conversion Service:
URL
Without feign: http://localhost:8100/currency-conversion/from/USD/to/INR/quantity/10
With feign :   http://localhost:8100/currency-converter-feign/from/USD/to/INR/quantity/10

Documentation: 
http://localhost:8100/currency-conversion-apidoc/
http://localhost:8100/currency-conversion-apidef/

Response Structure
{
  "id": 10001,
  "from": "USD",
  "to": "INR",
  "conversionMultiple": 65.00,
  "quantity": 10,
  "totalCalculatedAmount": 650.00,
  "environment": "8000 instance-id"
}



(5) Eureka naming server : 
- url: localhost:8761/

(6) API Gateway: 
Note: the upper case service name is copied from Eureka UI
- http://localhost:8765/currency-exchange-service-v2/currency-exchange/from/USD/to/INR

- http://localhost:8765/currency-conversion-service-v2/currency-conversion/from/USD/to/INR/quantity/10  -> request will be executed without without load balancer 

- http://localhost:8765/currency-conversion-service-v2/currency-converter-feign/from/USD/to/INR/quantity/10 -> request will be executed with load balancer 


- After implemantation of customized routes:
	- http://localhost:8765/get   : will redirect to httpbin.org:80 as opecified in APigatewayConfiguration.java
	- http://localhost:8765/currency-exchange/from/USD/to/INR
	- http://localhost:8765/currency-conversion/from/USD/to/INR/quantity/10
	- http://localhost:8765/currency-converter-feign/from/USD/to/INR/quantity/10
	- http://localhost:8765/currency-conversion-new/from/USD/to/INR/quantity/10

http://localhost:8765/currency-conversion/api-doc/


(7) Sample API for Resilence 4j Circuit breaker:
Curency Exchange service : http://localhost:8000/sample-api


(8) Zipkin:
http://localhost:9411/zipkin/

